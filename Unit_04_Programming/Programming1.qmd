---
title: "Functions & Loops"
subtitle: "BYU STAT 250"
author: "Dr. Scott D. Grimshaw"
format: 
  revealjs:
    theme: slides.scss
    multiplex: true
    transition: fade
    slide-number: true
    chalkboard: true
    center: false
    html-math-method: mathjax
execute:
  freeze: auto
---

```{r}
#| include: false
knitr::opts_chunk$set(
  fig.width = 8,
  fig.asp = 0.818,
  fig.retina = 3,
  dpi = 300,
  out.width = "80%",
  fig.align = "center"
)
options(scipen = 100, width = 100)
library(tidyverse)
```

## Announcements


## Recap of last few lectures

R Projects 

Import with different formats

Code to build what we want, copy of dataset to share


## Outline

Functions

Structure

Difference between `ifelse` and `if`

Repeating code chunks for `for` loops


## Ducks

Five little ducks went out one day,

Over the hill and far away,

Mother duck said, "Quack, quack, quack, quack!",

But only four little ducks came back.


## Ducks

::: panel-tabset
### Code
```{r duckprint1, fig.show = "hide"}
#| echo: true
#| eval: false
cat("Five little ducks went out one day,
Over the hill and far away,
Mother duck said, \"Quack, quack, quack, quack!\",
But only four little ducks came back.")
```

\ 

Notice the `\"` around `Quack, quack, quack, quack!` is because the string would close with a regular `"`

### Output
```{r ref.label = "duckprint1", echo = FALSE, warning = FALSE, out.width = "80%"}
```
:::

## Ducks

Nursery rhymes like these are quickly memorized because only two things change in the verse! If you want `5 little ducks` only need to specify `5`

::: panel-tabset
### Code
```{r duckprint2}
#| echo: true
#| eval: false
#| code-line-numbers: "1,3,6"
howmany <- 5

cat(howmany, "little ducks went out one day,
Over the hill and far away,
Mother duck said, \"Quack, quack, quack, quack!\",
But only", howmany - 1, "little ducks came back.")
```

\ 

How did we avoid having to specify both `5` and `4` ?

### Output
```{r ref.label = "duckprint2", echo = FALSE, warning = FALSE, out.width = "80%"}
```
:::

## R functions

function name

argument(s)

body of function is the code to perform

return at function computation

\ 

```{r}
#| echo: true
#| eval: false
myfunction <- function(arg){
   body of function
   return(somevalue) 
}
```

## `function` : Ducks

::: panel-tabset
### Code
```{r}
#| echo: true
#| eval: true
myducks <- function(howmany){

cat(howmany, "little ducks went out one day,
Over the hill and far away,
Mother duck said, \"Quack, quack, quack, quack!\",
But only", howmany - 1, "little ducks came back.")
  
}
```
\ 

Anyone think about using copy-and-paste followed by editing to do this? How is the function similar to those actions?

### howmany = 5
```{r}
#| echo: true
#| eval: true
myducks(5)
```
### howmany = 10
```{r}
#| echo: true
#| eval: true
myducks(10)
```
### howmany = 1
```{r}
#| echo: true
#| eval: true
myducks(1)
```
:::


## Fix plurals {.smaller}

```{r}
#| echo: true
#| eval: true
howmany <- 1
ifelse(howmany == 1, "", "s")

howmany <- 5
ifelse(howmany == 1, "", "s")
```

\ 

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "1,3,6,9"
howmany <- 1
cat(howmany, " little duck", 
    ifelse(howmany == 1, "", "s"), 
    " went out one day", 
    sep = "")

howmany <- 5
cat(howmany, " little duck", 
    ifelse(howmany == 1, "", "s"), 
    " went out one day", 
    sep = "")
```


## Fix plurals

::: panel-tabset
### Code
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "4,9"
myducks <- function(howmany){

cat(howmany, " little duck", 
    ifelse(howmany == 1, "", "s"), 
    " went out one day 
Over the hill and far away,
Mother duck said, \"Quack, quack, quack, quack!\",
But only ", howmany - 1, " little duck",
    ifelse(howmany - 1 == 1, "", "s"), 
    " came back.",
    sep = "")
  
}
```

### howmany = 5
```{r}
#| echo: true
#| eval: true
myducks(5)
```
### howmany = 2
```{r}
#| echo: true
#| eval: true
myducks(2)
```
### howmany = 1
```{r}
#| echo: true
#| eval: true
myducks(1)
```
:::


## Express numbers as words {.smaller}

```{r}
#| echo: true
#| eval: true
library(english)
words(1 : 5)

words(13)
```

\ 

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "1,2,7,8"
howmany <- 1
cat(words(howmany), " little duck", 
    ifelse(howmany == 1, "", "s"), 
    " went out one day", 
    sep = "")

howmany <- 5
cat(words(howmany), " little duck", 
    ifelse(howmany == 1, "", "s"), 
    " went out one day", 
    sep = "")
```

## Express numbers as words  {.smaller}

```{r}
#| echo: true
#| eval: true
library(english)
words(1 : 5)

Words(1 : 5)
```

\ 

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "1,2,7,8"
howmany <- 1
cat(Words(howmany), " little duck", 
    ifelse(howmany == 1, "", "s"), 
    " went out one day", 
    sep = "")

howmany <- 5
cat(Words(howmany), " little duck", 
    ifelse(howmany == 1, "", "s"), 
    " went out one day", 
    sep = "")
```

## Fix last line {.smaller}

```{r}
#| echo: true
#| eval: true
myducks(1)
```

\ 

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "9-15"
myducks <- function(howmany){

cat(Words(howmany), " little duck", 
    ifelse(howmany == 1, "", "s"), 
    " went out one day 
Over the hill and far away,
Mother duck said, \"Quack, quack, quack, quack!\"\n", sep="")

  if(howmany == 1){
    cat("All the little ducks came back.")
  }
  else{
    cat("But only ", words(howmany - 1)," little duck",
        ifelse((howmany - 1) == 1, "", "s"),
        " came back.", sep="")
  }

}
```

## Fix last line

::: panel-tabset
### Code
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "9-15"
myducks <- function(howmany){

cat(Words(howmany), " little duck", 
    ifelse(howmany == 1, "", "s"), 
    " went out one day 
Over the hill and far away,
Mother duck said, \"Quack, quack, quack, quack!\"\n", sep="")

  if(howmany == 1){
    cat("All the little ducks came back.")
  }
  else{
    cat("But only ", words(howmany - 1)," little duck",
        ifelse((howmany - 1) == 1, "", "s"),
        " came back.", sep="")
  }

}
```

### howmany = 5
```{r}
#| echo: true
#| eval: true
myducks(5)
```

### howmany = 1
```{r}
#| echo: true
#| eval: true
myducks(1)
```

:::

## Difference between `ifelse` and `if`

\ 

#### `ifelse` returns a value
```{r}
#| echo: true
#| eval: false
ifelse( condition, value if condition TRUE, value if condition FALSE )
```

\ 

```{r}
#| echo: true
#| eval: true
loan_app <- read_csv("
account, fico
27105, 775
27712, 690
31140, 635
15210, 790
60449, 820
")


ifelse(loan_app$fico > 750, "Approve", "Deny")
```

## Difference between `ifelse` and `if`  {.smaller}

\ 

#### `if` controls the flow in a function
```{r}
#| echo: true
#| eval: false
myfunction <- function(x){
  body of function
  
  if(condition){
    code to perform if condition is true
  }
  
  body of function
}
```

\ 

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "3-6"
myducks <- function(howmany){

if(howmany < 1){
  cat("You need some ducks!")
}
else{
cat(Words(howmany), " little duck", 
    ifelse(howmany == 1, "", "s"), 
    " went out one day 
Over the hill and far away,
Mother duck said, \"Quack, quack, quack, quack!\"\n", sep="")

  if(howmany == 1){
    cat("All the little ducks came back.")
  }else{
    cat("But only ", words(howmany - 1)," little duck",
      ifelse((howmany - 1) == 1, "", "s"),
      " came back.", sep="")
  }
}
}
```

## Software Testing

::: panel-tabset
### Code
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "3-6"
myducks <- function(howmany){

if(howmany < 1 | round(howmany) != howmany){
  cat("You need some ducks!")
}
else{
cat(Words(howmany), " little duck", 
    ifelse(howmany == 1, "", "s"), 
    " went out one day 
Over the hill and far away,
Mother duck said, \"Quack, quack, quack, quack!\"\n", sep="")

  if(howmany == 1){
    cat("All the little ducks came back.")
  }else{
    cat("But only ", words(howmany - 1)," little duck",
      ifelse((howmany - 1) == 1, "", "s"),
      " came back.", sep="")
  }
  cat("\n\n")
}
}
```

### howmany=5
```{r}
#| echo: true
#| eval: true
myducks(5)
```

### howmany=0
```{r}
#| echo: true
#| eval: true
myducks(0)
```

### howmany=2.3
```{r}
#| echo: true
#| eval: true
myducks(2.3)
```

\ 

Not the most helpful "error message." Really only conveying something wasn't what the function was expecting. Debugging that something may take patience and problem solving.
:::

## But we are missing the part where we repeat many times!

```{r}
#| echo: true
#| eval: true
myducks(3)
myducks(2)
myducks(1)
```

## `for` loops

Every loop has three things:

-   the sequence
-   the body
-   the output

```{r}
#| echo: true
#| eval: false
for(var in seq){
    expr
}
```

## `for` loops {.smaller}
```{r}
#| echo: true
#| eval: true
3 : 1
```

\ 

```{r}
#| echo: true
#| eval: true
for(ducks in 3 : 1){
  myducks(ducks)
}
```

## `while` loops {.smaller}
```{r}
#| echo: true
#| eval: false
while(condition){
    expr 
}
```

\ 

```{r}
#| echo: true
#| eval: true
ducks <- 3
while(ducks > 0){
  myducks(ducks)
  ducks <- ducks - 1
}
```



## Lecture Review 

Functions

Structure

-   function name
-   argument(s)
-   body of function is the code to perform
-   return at function computation

Difference between `ifelse` and `if`

Repeating code chunks for `for` loops


    