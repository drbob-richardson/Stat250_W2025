---
title: "Simulation: Computing Random Variables"
subtitle: "BYU STAT 250"
author: "Dr. Scott D. Grimshaw"
format: 
  revealjs:
    theme: slides.scss
    multiplex: true
    transition: fade
    slide-number: true
    chalkboard: true
    center: false
    html-math-method: mathjax
execute:
  freeze: auto
---

```{r}
#| include: false
knitr::opts_chunk$set(
  fig.width = 8,
  fig.asp = 0.818,
  fig.retina = 3,
  dpi = 300,
  out.width = "80%",
  fig.align = "center"
)
options(scipen = 100, width = 70)
library(tidyverse)
```

## Announcements


## Recap of last few lectures

Functions

Loops

## Outline

Simulation (Computing Random Variables)

Using R as a Calculator (`.R` script files)

Approximating ${\rm P}(A)$

Approximating ${\rm E}(Y)$



## Motivating Example

Intro to Gaming / Gambling: Roulette

Begin with a budget you are prepared to lose (`Budget`)

Place the minimum bet (`MinBet`)

Add winnings to amount you are prepared to lose

Continue to play until you've lost it all

Count how many turns / bets until you lost it all

## Motivating Example

There are many possible bets in roulette

::: {layout="[ 40, 60 ]"}
### Line Bet

-   Pays 5 : 1

-   Called "Line" because you put your chips between two sets of values

![](images/Roulette.png)
:::

## Motivating Example

Assume you have a \$100 Gaming Budget and the Minimum Bet is \$25

$$
\begin{eqnarray*}
&&{\rm P}(\mbox{Lose quickly}) \\
&& \\
&& = {\rm P}(\mbox{Lose first 4 bets}) \\
&& \\
&& = \left(1 - \frac{6}{38}\right) \cdot \left(1 - \frac{6}{38}\right) \cdot \left(1 - \frac{6}{38}\right) \cdot \left(1 - \frac{6}{38}\right)  \\
&& \\
&& = 0.5028813 
\end{eqnarray*}
$$

## Approximating Probability by Simulation

Thinking statistically, we could approximate this probability by gathering the data from people playing exactly this game in exactly this way

Need a big sample size

(actually, the bigger the sample size the more precise the proportion is for the "true probability")

\ 

Instead of asking people to do this, we can "simulate" the data we'd get if we did

## Approximating Probability by Simulation

Theoretically,

$$
\lim_{N\to\infty} \frac{\mbox{Number of times Event A Occurs}}{N} = {\rm P}(A)
$$

\ 

Simulation Code needs to

-   perform experiment and determine if Event A occurs
-   repeat many times (in a `for` loop)

## Motivating Example

R code to simulate playing roulette

We will use R as a calculator

![](images/RasaCalculator1.png)

Notice these aren't datasets that we'd use `tidyverse` functions to work with


## Motivating Example

R code to simulate playing roulette

::: panel-tabset
### Code

```{r}
#| echo: true
#| eval: false
# "spin" the roulette wheel 1-36 with 0 and 00 (00 will be -1)
outcome <- sample(-1 : 36, 1)
outcome

# did we win? If so, we get 5 : 1 payoff
# note: this is a specific line bet 
#       (would the probability change if we chose a different line?)
ifelse(outcome >= 7 & outcome <= 12, 125, -25)
```

### Your Turn

`.R` file

![](images/SimRoulette1.png)


### Play 1

```{r}
#| echo: false
set.seed(2112)
```

```{r}
#| echo: true
#| eval: true
# "spin" the roulette wheel 1-36 with 0 and 00 (00 will be -1)
outcome <- sample(-1 : 36, 1)
outcome

# did we win? If so, we get 5 : 1 payoff
ifelse(outcome >= 7 & outcome <= 12, 125, -25)
```

### Play 2

```{r}
#| echo: false
#set.seed(2319)
```

```{r}
#| echo: true
#| eval: true
# "spin" the roulette wheel 1-36 with 0 and 00 (00 will be -1)
outcome <- sample(-1 : 36, 1)
outcome

# did we win? If so, we get 5 : 1 payoff
ifelse(outcome >= 7 & outcome <= 12, 125, -25)
```

### Play 3

```{r}
#| echo: false
set.seed(756)
```

```{r}
#| echo: true
#| eval: true
# "spin" the roulette wheel 1-36 with 0 and 00 (00 will be -1)
outcome <- sample(-1 : 36, 1)
outcome

# did we win? If so, we get 5 : 1 payoff
ifelse(outcome >= 7 & outcome <= 12, 125, -25)
```

### Play 4

```{r}
#| echo: false
#set.seed(2319)
```

```{r}
#| echo: true
#| eval: true
# "spin" the roulette wheel 1-36 with 0 and 00 (00 will be -1)
outcome <- sample(-1 : 36, 1)
outcome

# did we win? If so, we get 5 : 1 payoff
ifelse(outcome >= 7 & outcome <= 12, 125, -25)
```
:::



## Motivating Example {.smaller}

R code to play until you lose all your gaming budget

::: panel-tabset
### Code

```{r}
#| echo: true
#| eval: true
howlong <- function(Budget, MinBet){

  plays <- 0
    
  while(Budget - MinBet >= 0){

    # "spin" the roulette wheel 1-36 with 0 and 00 (00 will be -1)
    outcome <- sample(-1 : 36, 1)
    plays <- plays + 1

    # did we win?
    payoff <- ifelse(outcome >= 7 & outcome <= 12, 5 * MinBet, - MinBet)

    # update Stake
    Budget <- Budget + payoff

  }

  # game over
  plays
}
```

### Your Turn

`.R` file

::: {layout="[-5,10,-10]"}
![](images/SimRoulette2.png)
:::

### Player 1

```{r}
#| echo: false
#| eval: true
set.seed(2319)
```

```{r}
#| echo: true
#| eval: true
howlong(Budget = 100, MinBet = 25)
```

### Player 2

```{r}
#| echo: true
#| eval: true
howlong(Budget = 100, MinBet = 25)
```

### Player 3

```{r}
#| echo: false
#| eval: true
set.seed(756)
```

```{r}
#| echo: true
#| eval: true
howlong(Budget = 100, MinBet = 25)
```

### Player 4

```{r}
#| echo: true
#| eval: true
howlong(Budget = 100, MinBet = 25)
```

Â 

Based on these 4 "Simulated Players" $$
{\rm P}(\mbox{Lose all your gaming budget in 4 bets}) \approx \frac{2}{4} = 0.5
$$ which is "close" to the true value 0.5028813
:::





## Motivating Example

To get a better approximation, we would need to simulate more players

Remember the "Law of Large Numbers" from Stat 121?

```{r out.width = "120%"}
#| echo: false
#| eval: true
Budget <- 100
MinBet <- 25
# simulate the distribution
Nsim <- 750
set.seed(2112)
number_plays <- rep(0, Nsim)
for(i in 1 : Nsim){
  number_plays[i] <- howlong(Budget, MinBet)
}
#number_plays <- replicate(750, howlong(100, 25))

Plose <- data.frame(Nsim = 1 : Nsim, prob = cumsum(number_plays == 4) / (1 : Nsim))

ggplot(Plose, aes(x = Nsim, y = prob)) + 
  geom_hline(yintercept = 0.5028813, size = 2, color = "royalblue") +
  geom_line() + 
  ylim(0, 1) +
  xlim(0, 750) +
  labs(
    title = "Simulation: Lose $100 Gaming Budget After 4 Bets",
    subtitle = "Min Bet $25, Line Bet (5 : 1 payoff)",
    x = "Number of Simulated Players", 
    y = "Approximate Probability"
  )
```

## Motivating Example {.smaller}

Approximate P(lose quickly) with a simulation study of 10,000 players

::: panel-tabset
### Code

Use `for` loop to simulate `Nsim` players

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1-3,5-11,13-14"
# define player behavior
Budget <- 100
MinBet <- 25

# simulate the number of plays
Nsim <- 10^5
set.seed(2112)
number_plays <- rep(0, Nsim)
for(i in 1 : Nsim){
  number_plays[i] <- howlong(Budget, MinBet)
}

# compute approx P(lose quickly)
mean(number_plays == 4)
```

### `.R` file

![](images/SimRoulette3.png)

### Approx Probability

```{r}
#| echo: false
#| eval: true
# define player behavior
Budget <- 100
MinBet <- 25

# simulate the number of plays
Nsim <- 10^5
set.seed(2112)
number_plays <- rep(0, Nsim)
for(i in 1 : Nsim){
  number_plays[i] <- howlong(Budget, MinBet)
}
```

```{r}
#| echo: true
#| eval: true
# simulated players
head(number_plays, 15)
```


```{r}
#| echo: true
#| eval: true
# compute approx P(lose quickly)
mean(number_plays == 4)
```

Close to "true probability" 0.5028813


:::




## Motivating Example

Can use the simulated players in `number_plays` to approximate other probabilities (easy to code, hard to derive theoretically)

\ 

${\rm P}(\mbox{playing all night})$

Each bet and spin of the roulette wheel takes about 5 min, so 12 hours playing is 12 \* 12 = 144 plays

```{r}
#| echo: true
#| eval: true
# compute approx P(play all night)
mean(number_plays >= 144)
```

## Approximating ${\rm E}(Y)$ by Simulation {.smaller}

Thinking statistically, we could approximate ${\rm E}(Y)$ by gathering the data from people playing exactly this game in exactly this way

Simulation Mean $\overline{Y}$ is approximately ${\rm E}(Y)$

Again the "Law of Large Numbers"

```{r out.width = "80%"}
#| echo: false
#| eval: true

EY <- data.frame(Nsim = 1 : Nsim, EY = cumsum(number_plays) / (1 : Nsim))

ggplot(EY, aes(x = Nsim, y = EY)) + 
  geom_line() + 
  xlim(0, 5000) +
  labs(
    title = "Simulation: Number of Bets to lose $100 Gaming Budget",
    subtitle = "Min Bet $25, Line Bet (5 : 1 payoff)",
    x = "Number of Simulated Players", 
    y = "Approximate E(Y)"
  )
```

## {.smaller}

### Approximating ${\rm E}(Y)$ by Simulation 

Reorganize the data from $Y_1,Y_2,\ldots,Y_N$ to

::: {style="font-size: 80%;"}
| Possible Value of $Y$ | \# times occurs | proportion of times occurs |
|:-------------------:|:---------------:|:--------------------------:|
| $0$                 | $f_0$           | $p_0$                      |
| $1$                 | $f_1$           | $p_1$                      |
| $2$                 | $f_2$           | $p_2$                      |
| $3$                 | $f_3$           | $p_3$                      |
| $\vdots$            | $\vdots$        | $\vdots$                   |

$$
\begin{eqnarray*}
\overline{Y} &=& \frac{1}{N} \sum_{i = 1}^N Y_i \\
&=&  \frac{1}{N} \Big[ (0\cdot f_0) + (1\cdot f_1) + (2\cdot f_3) + \cdots \Big] \\
&=&  \Big[ (0\cdot p_0) + (1\cdot p_1) + (2\cdot p_3) + \cdots \Big] \\
&=& \sum_{y=0}^\infty \ y\cdot p_y
\end{eqnarray*}
$$

:::


## Approximating ${\rm E}(Y)$ by Simulation 

Theoretically then 

$$
\begin{eqnarray*}
\lim_{N\to\infty} \overline{Y} 
&=& \lim_{N\to\infty} \sum_{y=0}^\infty \  y\cdot p_y \\
&=& \sum_{y=0}^\infty \ y\cdot \lim_{N\to\infty} p_y \\
&=& \sum_{y=0}^\infty \ y\cdot {\rm P}(Y = y) \\
&=& {\rm E}(Y)
\end{eqnarray*}
$$

## Motivating Example {.smaller}

Using the results of the simulation of `Nsim` players

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "6,9-11"
# define player behavior
Budget <- 100
MinBet <- 25

# simulate the number of plays
Nsim <- 10^5
set.seed(2112)
number_plays <- rep(0, Nsim)
for(i in 1 : Nsim){
  number_plays[i] <- howlong(Budget, MinBet)
}

# compute approx P(lose quickly)
mean(number_plays == 4)
```

Compute the sample mean of the simulated players

```{r}
#| echo: true
#| eval: true
# compute approx E(Y) where Y = number of plays
mean(number_plays)
```

Note: What would we need to do to compute ${\rm E}(Y)$ exactly (say, in Stat 240)?


## Motivating Example

Does ${\rm E}(Y)$ represent the `typical value`?

```{r out.width = "80%"}
#| echo: false
#| eval: true

Y <- data.frame(Nsim = 1 : Nsim, number_plays = number_plays)

ggplot(Y) + 
  geom_histogram(aes(x = number_plays, y = ..density..), binwidth = 1) + 
  geom_vline(xintercept = mean(number_plays), size = 2, color = "royalblue") +
  xlim(0, 200) +
  labs(
    title = "Simulation: Number of Bets to lose $100 Gaming Budget",
    subtitle = "Min Bet $25, Line Bet (5 : 1 payoff)",
    x = "Y = Number of Plays / Bets Until Losing it All", 
    y = "P(Y = y)"
  )
```

## Motivating Example

Does ${\rm E}(Y)$ represent the `typical value`?

$$
{\rm P}[Y > {\rm E}(Y)]
$$

```{r}
#| echo: true
#| eval: true
mean(number_plays > mean(number_plays))
```


## Other Approximations by Simulation

-   ${\rm V}(Y)$
-   median
-   pdf / pmf to describe shape and show a picture
-   quantiles

##
### Approximate ${\rm V}(Y)$

```{r}
#| echo: true
#| eval: true
var(number_plays)
```

### Approximate Quantile

95% of players will lose it all before how many plays / bets?

```{r}
#| echo: true
#| eval: true
quantile(number_plays, 0.95)
```

\ 

Notice we are treating our simulated players as "data" in R data functions 

If it was real data these would be "estimates" but with the [**simulated players**]{style="color:teal;"} these are "approximations"





## Lecture Review

Simulation (Computing Random Variables)

Approximating ${\rm P}(A)$

Approximating ${\rm E}(Y)$

\ 

Appendix:

-   Without Loss of Generality 

-   Using Simulations in "What If" Scenarios


 
# Without Loss of Generality

## Without Loss of Generality 

When writing the simulation code we have to make decisions on details for the computation, but we expect the specific choice doesn't impact the results

For example, in this code we needed to specify a line bet (we used 7 - 12) in the `payoff` line

We don't anticipate this detail to impact the result


## Change the detail of the Line Bet {.smaller}

Modify the `payoff` line to win when `outcome` is 22, 23, 24, 25, 26, 27

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "11,12"
howlong <- function(Budget, MinBet){

  plays <- 0
    
  while(Budget - MinBet >= 0){

    # "spin" the roulette wheel 1-36 with 0 and 00 (00 will be -1)
    outcome <- sample(-1 : 36, 1)
    plays <- plays + 1

    # did we win?
    payoff <- ifelse(outcome >= 22 & outcome <= 27, 5 * MinBet, - MinBet)

    # update Stake
    Budget <- Budget + payoff

  }

  # game over
  plays
}
```

## Change the detail of the Line Bet {.smaller}

```{r}
#| echo: true
#| eval: true
# define player behavior
Budget <- 100
MinBet <- 25

# simulate the number of plays
Nsim <- 10^5
set.seed(2319)
number_plays <- rep(0, Nsim)
for(i in 1 : Nsim){
  number_plays[i] <- howlong(Budget, MinBet)
}

# compute approx P(lose quickly)
mean(number_plays == 4)
```

\ 

Close to "true probability" 0.5028813

Close to "approx probability" using different line bet detail 0.50054

## Close Enough?

Recall this is an approximation, so we are comparing how close two approximations are

Thinking statistically, the width of the two-sample proportions 95% confidence interval is

$$
\pm 1.96 \sqrt{\frac{0.5\cdot 0.5}{10^5} + \frac{0.5\cdot 0.5}{10^5}} = \pm 0.0044
$$

Note: by changing the specific line bet detail the difference in approximations is 0.50054 - 0.50406 = -0.00352, which is within the confidence interval


# Using Simulations in "What If" Scenarios

## Using Simulations in "What If" Scenarios

What if the gaming budget increased to $200?

Intuition is that the number of bets / plays will increase, and we can be more precise

```{r}
#| echo: true
#| eval: true
# define player behavior
MinBet <- 25
# Different Budget is below

# simulate the number of plays
Nsim <- 10^5
set.seed(2182)
number_plays100 <- rep(0, Nsim)
number_plays200 <- rep(0, Nsim)
for(i in 1 : Nsim){
  number_plays100[i] <- howlong(100, MinBet)
  number_plays200[i] <- howlong(200, MinBet)
}
```


## Using Simulations in "What If" Scenarios

Compare probability of "lose quickly" for different gaming budget

```{r}
#| echo: true
#| eval: true
mean(number_plays100 <= 8)
mean(number_plays200 <= 8)
```


Compare ${\rm E}(Y)$ for different gaming budget

```{r}
#| echo: true
#| eval: true
mean(number_plays100)
mean(number_plays200)
```

