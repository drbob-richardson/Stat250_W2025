---
title: "Import Advanced"
subtitle: "BYU STAT 250"
author: "Dr. Scott D. Grimshaw"
format: 
  revealjs:
    theme: slides.scss
    multiplex: true
    transition: fade
    slide-number: true
    chalkboard: true
    center: false
    html-math-method: mathjax
execute:
  freeze: auto
---

```{r}
#| include: false
knitr::opts_chunk$set(
  fig.width = 8,
  fig.asp = 0.818,
  fig.retina = 3,
  dpi = 300,
  out.width = "80%",
  fig.align = "center"
)
options(scipen = 100, width = 100)
library(tidyverse)
```


## Announcements


## Recap of last lecture

Webpage Table (`html`)

Ethics and Terms of Service


## Outline

SAS and SPSS and Stata

API


## SAS and SPSS and Stata {.smaller}

::: panel-tabset
### `haven` package

Part of `tidyverse`

Not loaded with `package(tidyverse)`

-   SAS files (`.sas7bdat + .sas7bcat`): `read_sas`

-   SAS Transport files (v5 & 8): `read_xpt`

-   SPSS files: `read_sav`

-   Stata files: `read_dta`

Also `write_` versions (you can do data work with `tidyverse` and transfer data types to SAS/SPSS/Stata)

### SAS 

NHANES 2015-206 Dietary Data (Individual Foods, First Day)


```{r}
#| echo: true
#| eval: true 
library(haven)

foods<-read_xpt("https://wwwn.cdc.gov/Nchs/Nhanes/2015-2016/DR1IFF_I.XPT")
foods
```


Data Dictionary: <https://wwwn.cdc.gov/Nchs/Nhanes/2015-2016/DR1IFF_I.htm>

### SPSS

Benenson, J.F. and Wrangham, R.W. (2016) Current Biology

Following a conflict, males are predisposed to be more ready than females to repair their relationship via friendly contact

Duration or frequency of peaceful physical contacts served as the measure of post-conflict affiliation because they are strongly associated with pro-social intentions



```{r}
#| echo: true
#| eval: true 
library(haven)

tennis <- read_sav("https://ndownloader.figshare.com/files/4699615")
tennis
```


### Stata

A researcher is interested in how variables, such as GRE (Graduate Record Exam scores), GPA (grade point average) and prestige of the undergraduate institution, effect admission into graduate school. The response variable, admit/donâ€™t admit, is a binary variable.


```{r}
#| echo: true
#| eval: true 
library(haven)

gradschool <- read_dta("https://stats.idre.ucla.edu/stat/stata/dae/binary.dta")
gradschool
```


:::

## API {.smaller}

An increasing popular method for collecting data online is via a Representational State Transfer Application Program Interface (REST API or API) 

Many organizations make their data available through an API (a set of protocols that a user can use to query a web service for data)

There are two ways to collect data with an API in R 

-   Use an R library that comes packaged with functions that call the API. The library developers have already done all the heavy lifting involved in setting up calls to the API

-   Make direct calls to the API (need to look up the documentation of the API to make sure that you are using the correct protocol)


## API {.smaller}

Google Trends

<https://trends.google.com/trends/>

![](images/GoogleTrends1.png)

<https://newsinitiative.withgoogle.com/resources/trainings/google-trends-understanding-the-data/>


## API {.smaller}

Google Trends

::: panel-tabset
### Background

Google makes many APIs available for public use. One such API is Google Trends. This provides data on query activity of any keyword you can think of. Basically, this data tells you what topics people are interested in getting information on. You can pull this data directly into R via the R package gtrendsR that makes calls to the Google Trends API on your behalf.

### `gtrendsR`

Get web query activity for keywords "spiderman" and "black panther" in queries originating in the US for the full Google Trends time period


```{r}
#| echo: true
#| eval: true 
library(gtrendsR)

popular <- gtrends( c("spiderman", "black panther"), geo = c("US"), time = "all")

names(popular)
```


### Visualize


```{r out.width = "40%"}
#| echo: true
#| eval: true 
plot(popular)
```


:::

## API {.smaller}

Google Trends

::: panel-tabset

### `interest_over_time`


```{r}
#| echo: true
#| eval: true 
tail(popular$interest_over_time)
```


### Time Series Plot 


```{r out.width = "40%"}
#| echo: true
#| eval: true 
#| code-fold: true
ggplot(popular$interest_over_time, aes(x = ymd(date), y = parse_number(hits), color = keyword)) +
  geom_line() + 
  labs(
    title = "Google Trends",
    x = NULL,
    y = "Hits / Max(Hits)"
  ) +
  scale_color_manual(values = c("#664EAE","#b11313")) +
  geom_vline(xintercept = mdy("June 30, 2004"), linetype="dotted") +
  annotate(
    geom = "text", x = mdy("June 30, 2004"), y = 60,
    label = "Spider-Man 2", 
    size = 3, angle = 90, color = "#b11313") + 
  geom_vline(xintercept = mdy("May 4, 2007"), linetype="dotted") +
  annotate(
    geom = "text", x = mdy("May 4, 2007"), y = 60,
    label = "Spider-Man 3", 
    size = 3, angle = 90, color = "#b11313") + 
  geom_vline(xintercept = mdy("July 3, 2012"), linetype="dotted") +
  annotate(
    geom = "text", x = mdy("July 3, 2012"), y = 40,
    label = "The Amazing Spider-Man", 
    size = 3, angle = 90, color = "#b11313") + 
  geom_vline(xintercept = mdy("May 2, 2014"), linetype="dotted") +
  annotate(
    geom = "text", x = mdy("May 2, 2014"), y = 40,
    label = "The Amazing Spider-Man 2", 
    size = 3, angle = 90, color = "#b11313") + 
  geom_vline(xintercept = mdy("June 28, 2017"), linetype="dotted") +
  annotate(
    geom = "text", x = mdy("June 28, 2017"), y = 70,
    label = "Spider-Man: Homecoming", 
    size = 3, angle = 90, color = "#b11313") + 
  geom_vline(xintercept = mdy("July 2, 2019"), linetype="dotted") +
  annotate(
    geom = "text", x = mdy("July 2, 2019"), y = 70,
    label = "Spider-Man: Far From Home", 
    size = 3, angle = 90, color = "#b11313") + 
  geom_vline(xintercept = mdy("December 17, 2021"), linetype="dotted") +
  annotate(
    geom = "text", x = mdy("December 17, 2021"), y = 70,
    label = "Spider-Man: No Way Home", 
    size = 3, angle = 90, color = "#b11313") + 
  geom_vline(xintercept = mdy("February 16, 2018"), linetype="dotted") +
  annotate(
    geom = "text", x = mdy("February 16, 2018"), y = 85,
    label = "Black Panther", 
    size = 3, angle = 90, color = "#664EAE") + 
  geom_vline(xintercept = mdy("November 11, 2022"), linetype="dotted") +
  annotate(
    geom = "text", x = mdy("November 11, 2022"), y = 85,
    label = "Black Panther: Wakanda Forever", 
    size = 3, angle = 90, color = "#664EAE") + 
  theme_minimal()
```


### To Share


```{r}
#| echo: true
#| eval: false 
write_csv(popular$interest_over_time, "PopularitySpidermanBlackPanther.csv")
```


:::

## API {.smaller}

Google Trends

`interest_by_region`

::: columns
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: true 
popular$interest_by_region |>
  filter(keyword == "spiderman") |>
  arrange(desc(hits)) |>
  head(n = 5)
```

:::
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: true 
popular$interest_by_region |>
  filter(keyword == "black panther") |>
  arrange(desc(hits)) |>
  head(n = 5)
```

:::
:::


## Querying an API Manually {.smaller}

If you want to query an API for which there is no R package, you need to set up the queries manually 

This can be done by use of the `GET` function in the `httr` package 

The argument to this function will be driven by the protocol of the particular API you are interested in (to find out what this protocol is, you need to look up the API documentation)


## Lecture Review {.smaller}

SAS and SPSS and Stata

API

    
    
