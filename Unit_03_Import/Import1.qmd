---
title: "Import Basics"
subtitle: "BYU STAT 250"
author: "Dr. Scott D. Grimshaw"
format: 
  revealjs:
    theme: slides.scss
    multiplex: true
    transition: fade
    slide-number: true
    chalkboard: true
    center: false
    html-math-method: mathjax
execute:
  freeze: auto
---

```{r}
#| include: false
knitr::opts_chunk$set(
  fig.width = 8,
  fig.asp = 0.818,
  fig.retina = 3,
  dpi = 300,
  out.width = "80%",
  fig.align = "center"
)
options(scipen = 100, width = 100)
library(tidyverse)
```

## Announcements


## Recap of last few lectures

Wrangling Grammar

Getting the dataset we want from the dataset(s) we are given

Project has you thinking how curated datasets came to be

## Outline

R Project

Local Dataset Files

Comma-, Space-Delimited

Excel 

Code to build what we want, copy of dataset to share


## Where does your analysis live? {.smaller}

As a beginner, it’s okay to rely on your `current Environment` to contain all the objects you have created throughout your analysis. 

However, to make it easier to work on larger projects or collaborate with others, your source of truth should be the Quarto file and R scripts. 

With your R scripts (and your data files), you can recreate the environment. 

With only your environment, it’s much harder to recreate your R scripts: you’ll either have to retype a lot of code from memory (inevitably making mistakes along the way) or you’ll have to carefully mine your R history.

## Where does your analysis live?

To help keep your R scripts as the source of truth for your analysis, we highly recommend that you instruct RStudio not to preserve your workspace between sessions. 

::: {layout="[-5,45,-10]"}
![](images/clean-slate.png)
:::

## Where does your analysis live?

This will cause you some short-term pain, because now when you restart RStudio, it will no longer remember the code that you ran last time nor will the objects you created or the datasets you read be available to use. 

But this short-term pain saves you long-term agony because it forces you to capture all important procedures in your code. There’s nothing worse than discovering three months after the fact that you’ve only stored the results of an important calculation in your environment, not the calculation itself in your code.

## Where does your analysis live?

As a beginning R user, it’s OK to let your `working directory` be your home directory, documents directory, or any other weird directory on your computer. 

But you’re almost done with Stat 250, and you’re no longer a beginner. You should evolve to organizing your projects into directories and, when working on a project, set R’s working directory to the associated directory.

## R Project {.smaller}

Keeping all the files associated with a given project (input data, R scripts, analytical results, and figures) together in one directory is such a wise and common practice that RStudio has built-in support for this via projects.

::: {layout="[-5,25,-10]"}
![](images/new-project.png)
:::

## R Project

Double-click that file to re-open the project. 

Notice you get back to where you left off: it’s the same working directory and command history, and all the files you were working on are still open. 
Because you followed the "clean slate" instructions, you will, however, have a completely fresh environment, guaranteeing that you’re starting with a clean slate.

## Import From Local Files {.smaller}

### Download file(s) to R Project directory 

::: panel-tabset
### Kaggle

Example: Kaggle Titanic dataset <https://www.kaggle.com/c/titanic>

::: {layout="[-5,25,-10]"}
![](images/kaggletitanic.png)
:::

### Instructions

-   Login (create a login if this is your first Kaggle download)

-   Click on Data tab

-   Download the `train.csv` file to R Project folder 
(renaming to `KaggleTitanicTrain.csv`)

-   Double-click on R Project File

:::


## CSV (comma delimited file) {.smaller}

::: panel-tabset
### File
```{r "code-line-numbers"="false"}
#| echo: true
#| eval: false
PassengerId,Survived,Pclass,Name,Sex,Age,SibSp,Parch,Ticket,Fare,Cabin,Embarked
1,0,3,"Braund, Mr. Owen Harris",male,22,1,0,A/5 21171,7.25,,S
2,1,1,"Cumings, Mrs. John Bradley (Florence Briggs Thayer)",female,38,1,0,PC 17599,71.2833,C85,C
3,1,3,"Heikkinen, Miss. Laina",female,26,0,0,STON/O2. 3101282,7.925,,S
4,1,1,"Futrelle, Mrs. Jacques Heath (Lily May Peel)",female,35,1,0,113803,53.1,C123,S
5,0,3,"Allen, Mr. William Henry",male,35,0,0,373450,8.05,,S
6,0,3,"Moran, Mr. James",male,,0,0,330877,8.4583,,Q
7,0,1,"McCarthy, Mr. Timothy J",male,54,0,0,17463,51.8625,E46,S
```

-   column values are separated / delimited by `,`
-   first row has column names
-   text that forms a single column and has `,` is in `"`
-   `,,` results in `NA` (missing value)

### `read_csv`
```{r}
#| echo: true
#| eval: false
TitanicTrain <- read_csv("KaggleTitanicTrain.csv")
```

```{r}
#| echo: false
#| eval: true
TitanicTrain <- read_csv("data/KaggleTitanicTrain.csv")
TitanicTrain
```
:::

## Import / Transform {.smaller}

::: panel-tabset
### Code Aloud
Once you read data in, the first step usually involves transforming it in some way to make it easier to work with in the rest of your analysis. 

#### `mutate`
-   Convert `Pclass` (Ticket Class) from `numeric` to Ordinal Factor
-   Change values of `Survived` from `0/1` to `TRUE/FALSE` 

#### `rename`
-   Change name `SibSp` to `SiblingSpouse`
-   Change name `Parch` to `ParentChild`

### Code
```{r}
#| echo: true
TitanicTrain <- TitanicTrain |> 
  mutate(
    Pclass = factor(Pclass, levels = c(1, 2, 3)),
    Survived = ifelse(Survived == 1, TRUE, FALSE)
  ) |>
  rename(
    SiblingSpouse = SibSp,
    ParentChild = Parch
  )
```

### `TitanicTrain`
```{r}
#| echo: true
TitanicTrain
```
:::


## Import / Transform {.smaller}

It can be useful for speeding up reading the data if you have a large  file and only want to use some of the columns

```{r}
#| echo: true
#| eval: false
TitanicTrain <- read_csv("KaggleTitanicTrain.csv",
                         col_types = cols_only(Survived = col_number(),
                                               Pclass = col_factor(),
                                               Age = col_number(),
                                               Fare = col_number()))
```

```{r}
#| echo: false
#| eval: true
TitanicTrain <- read_csv("data/KaggleTitanicTrain.csv",
                         col_types = cols_only(Survived = col_number(),
                                               Pclass = col_factor(),
                                               Age = col_number(),
                                               Fare = col_number()))
TitanicTrain
```


## Space-delimited file {.smaller}

::: panel-tabset
### Oscar "Thanks"
Kashlak (2019) Significance

Winning an Academy Award is a career highlight for actors, directors and anyone else involved in the movie business. But the happiness and gratitude that accompany a win often lead to long, rambling acceptance speeches.

Count "Thanks" in Oscar Thank You Speeches

<https://rss.onlinelibrary.wiley.com/doi/full/10.1111/j.1740-9713.2019.01231.x>

### File
```{r "code-line-numbers"="false"}
#| echo: true
#| eval: false
# Oscar Database: http://aaspeechesdb.oscars.org/
# Runtimes from Wikipedia
# budget from IMDB
# inflate from https://www.bls.gov
## wcnt:    number of words in the Best Picture acceptance speech
## year:    movie release year (broadcast occurs in year+1)
## budget:  total unadjusted budget in US dollars
## inflate: Inflation rate with respect to Fall 2018
## thanksP: number of "thanks" in the Best Picture speech
## man:     number of words in the Best Leading Actor speech
## woman:   number of words in the Best Leading Actress speech
## thanksM: number of "thanks" in the Best Leading Actor speech
## thanksW: number of "thanks" in the Best Leadeing Actress speech
## time:    total broadcast runtime in minutes
 wcnt year    budget inflate thanksP  man   woman  thanksM  thanksW  time
  212 1942   1344000   16.06  3       101     452        1        2   108
  119 1946   2100000   13.85  1        56     218        2        1   101
  176 1947   2000000   11.73  5        96     220        1        1   172
   50 1949         0   10.51  4        29      31        3        1   118
   34 1950   1400000   10.73  4       208      46        3        1   110
   31 1951   2723903    9.93  3        73      43        1        1   138
  156 1952   4000000    9.51  3       159     100        0        4   113
   97 1953   1650000    9.48  3         4      33        2        1    93
   46 1954    910000    9.37  1        64      33        1        2   118
   70 1955    343000    9.44  1        61      71        4        1   108
   35 1956   6000000    9.41  2        22     132        1        3    90
```

### Details
-   at least one space between column values (no missing values)
-   need to ignore / skip the first 14 lines
-   column names in "first" row

### `read_table`
```{r}
#| echo: true
thanks<-read_table("https://sites.ualberta.ca/~kashlak/data/oscDataTable.txt",
                   skip=14)
thanks
```
Note: `year` is `numeric` (not a `Date` type)

### Visualize
```{r out.width = "55%"}
#| code-fold: true
#| echo: true
ggplot(thanks, aes(x = year, y = time)) +
  geom_point() + 
  geom_vline(xintercept = 1972.5) + 
  labs(
    title = "Oscar Awards Show",
    x = "",
    y = "Run Time (min)"
  )
```
:::

## Excel file {.smaller}

Example: Grimshaw & Larson (2021), "Effect of Star Power on NBA All-Star Game TV Audience," Journal of Sports Economics

-   Download Excel file and save to R Project folder <https://grimshawville.byu.edu/NBArecordatbreak.xlsx>

-   Double-click on R Project File

::: {layout="[-5,25,-10]"}
![](images/NBArecordatbreak.png)
:::

## Excel file {.smaller}

::: panel-tabset
### `readxl` package

Part of `tidyverse`

Not loaded with `package(tidyverse)`

`read_excel` reads both xls and xlsx files and detects the format from the extension

### `read_excel`
```{r}
#| echo: true
#| eval: false
library(readxl)
AtBreak <- read_excel("NBArecordatbreak.xlsx")
```

```{r}
#| echo: false
#| eval: true
library(readxl)
AtBreak <- read_excel("data/NBArecordatbreak.xlsx")
AtBreak
```

### Tidy
```{r}
#| echo: true
names(AtBreak)[1] <- "Team"
AtBreak <- AtBreak |>
  pivot_longer(
    cols = as.character(2003 : 2018),
    names_to = "Year",
    values_to = "WinningProp"
  )
AtBreak
```

### To Share

```{r}
#| echo: true
#| eval: false 
write_csv(AtBreak, "NBArecordatbreak.csv")
```

In the folder with the R Project, there is now the file `NBArecordatbreak.csv`

```{r "code-line-numbers"="false"}
#| echo: true
#| eval: false
Team,Year,WinningProp
BOS,2003,0.551
BOS,2004,0.426
BOS,2005,0.509
BOS,2006,0.385
BOS,2007,0.255
BOS,2008,0.82
BOS,2009,0.8
BOS,2010,0.64
BOS,2011,0.741
BOS,2012,0.469
BOS,2013,0.538
BOS,2014,0.352
BOS,2015,0.392
BOS,2016,0.582
BOS,2017,0.649
BOS,2018,0.678
BKN,2003,0
BKN,2004,0
BKN,2005,0
BKN,2006,0
BKN,2007,0
BKN,2008,0
BKN,2009,0
BKN,2010,0
BKN,2011,0
BKN,2012,0
BKN,2013,0.585
BKN,2014,0.471
BKN,2015,0.404
BKN,2016,0.259
BKN,2017,0.161
BKN,2018,0.322
NYK,2003,0.438
NYK,2004,0.463
NYK,2005,0.396
NYK,2006,0.288
NYK,2007,0.434
NYK,2008,0.288
NYK,2009,0.404
NYK,2010,0.373
NYK,2011,0.519
NYK,2012,0.486
NYK,2013,0.64
NYK,2014,0.385
NYK,2015,0.189
NYK,2016,0.418
NYK,2017,0.404
NYK,2018,0.39
PHI,2003,0.51
PHI,2004,0.415
PHI,2005,0.491
PHI,2006,0.481
PHI,2007,0.321
PHI,2008,0.434
PHI,2009,0.529
PHI,2010,0.385
PHI,2011,0.482
PHI,2012,0.588
PHI,2013,0.431
PHI,2014,0.278
PHI,2015,0.226
PHI,2016,0.151
PHI,2017,0.375
PHI,2018,0.545
TOR,2003,0.292
TOR,2004,0.49
TOR,2005,0.396
TOR,2006,0.377
TOR,2007,0.547
TOR,2008,0.549
TOR,2009,0.382
TOR,2010,0.558
TOR,2011,0.268
TOR,2012,0.303
TOR,2013,0.396
TOR,2014,0.538
TOR,2015,0.679
TOR,2016,0.673
TOR,2017,0.579
TOR,2018,0.719
```

### Effect

::: {layout="[-5,25,-10]"}
![](images/SportsEconPaper.png)
:::

:::

## Lecture Review {.smaller}

R Project

Local Raw Datasets

Comma-, Space-Delimited

Excel 

Code to build what we want, copy of dataset to share


    
    