---
title: "Assignment: Random Sampling and Data Structures"
author: "YOUR_NAME_HERE"
output: visual
format: pdf
---

## Problem 1

Let us assign treatment groups A or B randomly to individuals. (Done together in class)

```{r}
#| echo: true
# Individuals in the study
Name = c("Alice","Bob","Hector","Steve","Tony","Steph","Mary", "Charlie", "Diana", "Ethan")


```

## Problem 2

Using the data frame you created, let's subset it in various way.

Write code to get only individuals from treatment group B. (Done together in class)

```{r}
#| echo: true


```

Write code to get the first 5 individuals of the group.

```{r}
#| echo: true

```

## Problem 3

Create a list that includes the following elements:

-   The full data frame of individuals and treatment groups
-   The list of names of individuals in treatment group A
-   The list of names of individuals in treatment group B

Create these lists using subsetting and logicals as opposed to hard coding the names. (Done together in class)

```{r}
#| echo: true


```

## Problem 4

We have a new clinical trial approaching. We have 300 individuals. Instead of names, we will only use ID numbers, which will range from 501 to 800. We know that the first 100 of these are male and the rest are female. We must randomly assign a treatment out 4 possible values: {A, B, C, D}. Create a data frame that includes an individuals ID number, whether they are male or female, and the treatment randomly assigned. **Print the first 10 rows of the resulting data frame.**

```{r}
#| echo: true


```

## Problem 5

You receive some new instruction to have exactly 75 in each group. So instead of randomly assigning the group to each individual, randomly shuffle the ID numbers, and ensure there are 75 in each of the 4 treatment groups. **Print the first 10 rows of the resulting data frame.**

```{r}
#| echo: true


```


## Problem 6

Use the sample() function to complete the following tasks:

-   Randomly reorder the names in the vector names below.
-   Select 4 names without replacement.
-   Select 5 names with replacement.

```{r}
#| echo: true
names <- c("Alice", "Bob", "Charlie", "Diana", "Ethan", "Fiona", "George", "Helen")
# Write your code here

```

## Problem 7

Perform the following tasks:

-   Create a 3x4 matrix where the elements are the numbers 1 through 12, filled row-wise.
-   Extract the element in the 2nd row, 3rd column.
-   Extract the 2nd column.

```{r}
#| echo: true
# Write your code here

```

## Problem 8

Given the matrix below, use logical masks to extract:

-   All rows where the value in the first column is greater than 2.
-   The elements in the second column that are even numbers.

```{r}
#| echo: true
matrix_example <- matrix(1:12, nrow = 4, byrow = TRUE)
matrix_example
# Write your code here
```

## Problem 9

Given the list below, complete the following tasks:

-   Extract the second element as a list.
-   Extract the contents of the second element.
-   Extract the third element and subset its first two rows.

```{r}
#| echo: true
example_list <- list(
  vector = c(10, 20, 30),
  matrix = matrix(1:9, nrow = 3),
  data_frame = data.frame(ID = 1:3, Value = c("A", "B", "C"))
)
# Write your code here
```

## Problem 10:

Given the vector below:

Create a logical mask to identify elements greater than 15. Use the mask to subset the vector. Count how many elements are greater than 15.

```{r}
#| echo: true
vec <- c(10, 25, 5, 18, 30, 12, 20)
# Write your code here
```

## Problem 11

Create a logical mask to check which rows have the Name column equal to "Alice" or "Charlie". Use the mask to subset the data frame and show only those rows.

```{r}
#| echo: true
df_example <- data.frame(
  ID = 1:5,
  Name = c("Alice", "Bob", "Charlie", "Diana", "Ethan"),
  Age = c(25, 30, 35, 40, 28)
)
# Write your code here
```
