---
title: "Tidy Data"
subtitle: "BYU STAT 250"
author: "Dr. Scott D. Grimshaw"
format: 
  revealjs:
    theme: slides.scss
    multiplex: true
    transition: fade
    slide-number: true
    chalkboard: true
    center: false
execute:
  freeze: auto
---

```{r}
#| include: false
knitr::opts_chunk$set(
  fig.width = 8,
  fig.asp = 0.818,
  fig.retina = 3,
  dpi = 300,
  out.width = "80%",
  fig.align = "center"
)
options(scipen = 100)
```


## Announcements


## Recap of last lecture

Data over time (Time Series Plot)

-   A single variable measured at regular time intervals

-   Working with dates and times

-   R details (data types)


## Outline

Tidy Data

-   Tidy Data Rules

-   What does untidy data look like?

-   What needs to be done to tidy it



## Tidy Data {.smaller}

The same underlying data can be represented multiple ways.

Tidy Data Rules:

-   Each variable must have its own column

-   Each observation must have its own row

-   Each value must have its own cell

![](images/tidy1.png){width=150%}


## Tidy Data Example

Is there a difference between local buyers and out-of-state buyers after adjusting for factors that impact price?

```{r}
#| echo: false
library(tidyverse)
set.seed(1756)
AZapts <- read_table("https://grimshawville.byu.edu/AZapts.txt", na = ".")
AZapts |>
  select(buyer, price, units, acres, sqft, condition, covpkg, age, region) |>
  slice_sample(n = 3096)
```

Model with response variable (`price`) and other columns as explanatory variables

Each row is a transaction

## Tidy Data Example

```{r}
#| echo: false
set.seed(1756)
AZapts |>
  select(buyer, price, units, acres, sqft, condition, covpkg, age, region) |>
  slice_sample(n = 3096)
```

Tidy Data Rules:

-   Each variable must have its own column

-   Each observation must have its own row

-   Each value must have its own cell 


## Why tidy?

Be consistent in data structure

Assumed structure for most R functions because statisticians work with `dataset`

-   graph the histogram of a [**column**]{style="color:teal;"} of a `dataset`

-   create scatterplot of two [**columns**]{style="color:teal;"} of a `dataset`

-   look at the first few [**rows**]{style="color:teal;"} of a `dataset`

Connects to matrix view of data used in statistical modeling


## Untidy Data

::: appex
Happy families are all alike; every unhappy family is unhappy in its own way.

[**Leo Tolstoy**]{style="color:teal;"}
:::

It's too simple to judge all not tidy data as bad / wrong.

There is usually a reason someone chose a data structure, and maybe it wasn't ["How can I help my statistician / data scientist get quickly started on the analysis?"]{style="color:teal;"}

Who will take the untidy data and make it tidy? [You!]{style="color:teal;"}


## Untidy Data Example 

Statistics Degrees Awarded (Degree Type over Time)

::: panel-tabset
### Untidy Data

```{r}
#| echo: false
stat_degrees<-read_table2("
degree  1987 1992 1997 2002 2007 2012 2017
BS       463  554  365  454  610 1345 3362
MS       575  751  795  908 1420 2026 3366
PhD      114  170  187  177  300  345  419
")
stat_degrees
```

What were they thinking?

Assign Degree Type to Rows, Time to Columns to make a pretty table

Not tidy because row is all years

(Need one degree type and year per row)

### Tidy Data {.smaller}

```{r}
#| echo: false
stat_degrees |>
  pivot_longer(c(`1987`, `1992`, `1997`, `2002`, `2007`, `2012`, `2017`), 
               names_to = "year", values_to = "awarded") |>
  mutate(year = parse_number(year)) |>
  print(n = 11)
```

### Plot
```{r}
#| echo: false
stat_degrees <- stat_degrees |>
  pivot_longer(c(`1987`, `1992`, `1997`, `2002`, `2007`, `2012`, `2017`), 
               names_to = "year", values_to = "awarded") |>
  mutate(year = parse_number(year))
```

```{r out.width = "50%"}
#| echo: true
ggplot(stat_degrees, aes(x = year, y = awarded, color = degree)) +
  geom_line()
```

:::

## Untidy Data Example {.smaller}

Statistics Degrees Awarded (Gender by Type over Time)

::: panel-tabset
### Untidy Data
Women
```{r}
#| echo: false
stat_women<-read_csv("
degree,1987,1992,1997,2002,2007,2012,2017
BS,     197, 258, 164, 196, 256, 564,1444
MS,     232, 294, 380, 435, 678, 955,1639
PhD,     30,  41,  57,  66, 123, 120, 144
")
stat_women
```

Men
```{r}
#| echo: false
stat_men<-read_csv("
degree,1987,1992,1997,2002,2007,2012,2017
BS,     266, 296, 201, 258, 354, 781,1918
MS,     343, 457, 415, 473, 742,1071,1727
PhD,     84, 129, 130, 111, 177, 225, 275
")
stat_men
```

What were they thinking?

Take last pretty table, and make two tables for gender

Not tidy because two datasets

(Need one dataset with one gender and one degree type and year per row)

### Tidy Data
```{r}
#| echo: false
stat_women <- stat_women |>
  pivot_longer(c(`1987`, `1992`, `1997`, `2002`, `2007`, `2012`, `2017`), 
               names_to = "year", values_to = "awarded")  |>
  mutate(gender = "women")
stat_men <- stat_men |>
  pivot_longer(c(`1987`, `1992`, `1997`, `2002`, `2007`, `2012`, `2017`), 
               names_to = "year", values_to = "awarded") |>
  mutate(gender = "men")
stat_women |>
  bind_rows(stat_men) |>
  select(gender, everything()) |>
  arrange(year, degree, desc(gender)) |>
  print(n = 15)
```

### Plot

```{r}
#| echo: false
stat_grads <- stat_women |>
  bind_rows(stat_men) |>
  mutate(year = parse_number(year))
```

```{r out.width = "50%"}
#| echo: true
ggplot(stat_grads, aes(x = year, y = awarded, color = degree)) +
  geom_line() + 
  facet_wrap(~ gender)
```

:::

## Untidy Data Example {.smaller}

BYU Statistics Classes (Capacity / Enrollment by Class Type over Time)

::: panel-tabset
### Untidy Data

```{r}
#| echo: false
byustat<-read_csv("
Course, Type,      Year, Fall, Winter, Spring
Stat230,Capacity,  2021, 150,  136,    40
Stat230,Enrollment,2021, 102,   95,    29
Stat230,Capacity,  2022, 125,  140,    50
Stat230,Enrollment,2022,  99,   83,    16
Stat240,Capacity,  2021, 158,  135,    0
Stat240,Enrollment,2021, 147,  103,    0
Stat240,Capacity,  2022, 130,  135,    50
Stat240,Enrollment,2022, 102,   75,    14
Stat250,Capacity,  2021, 100,  105,    0
Stat250,Enrollment,2021,  84,   98,    0
Stat250,Capacity,  2022, 101,  130,    0
Stat250,Enrollment,2022,  91,   65,    0
")
print(byustat, n = 8)
```

What were they thinking?

Assign Semester to Columns instead of Capacity / Enrollment because there are more of them

Not tidy because an observation is really two rows

(Need one class and semester per row)

### Tidy Data 

```{r}
#| echo: false
byustat <- byustat |>
  pivot_longer(c("Fall", "Winter", "Spring"), 
               names_to = "Semester", values_to = "Total") |>
  pivot_wider(names_from = "Type", values_from = "Total") 

print(byustat, n = 18)
```

### Plot
```{r out.width = "50%"}
#| echo: true
ggplot(byustat, aes(x = Capacity, y = Enrollment, color = Course)) +
  geom_point(size = 3) +
  geom_smooth(method='lm', formula= y~x, se = FALSE)
```

:::



## Untidy Data Example {.smaller}

Point by Point Volleyball Data

::: panel-tabset
### Untidy Data (JSON file) {.smaller}
```{r}
#| echo: true
#| eval: false
{"id":["5b76cb1ee4b0dda432a312fc"],
 "portalMatchId":[64715],
 "scoresheetId":["5b83d257e4b0038b53d3f11b"],
 "encodedVideoUrl":["http://vm-transcoded-videos.s3.amazonaws.com/2018.08.17-20.51-64715.mp4"],
 "lastUpdated":["2018-12-19T10:34:46"],
 "homeTeamId":[174],
 "awayTeamId":[261],
 "duration":[7552196],
 "sets":[{
  "homeScore":{},
  "awayScore":{},
  "setNum":{},
  "rallies":[{
   "homeScore":[0],
   "awayScore":[0],
   "homeSetterRotation":[6],
   "awaySetterRotation":[5],
   "events":[{
    "id":["cb608e5a-8676-4fb4-a1d4-aabb6f30fbeb"],
    "type":{
     "description":["serve"],
     "details":{
     "nearSideTeamId":["174"],
     "onCourtHome":["[{
     \"id\":null,
     \"teamId\":174,
     \"portalPlayerId\":-225255,
     \"number\":10,
     \"name\":\"Tiana Gleason\",
     \"originalPosition\":\"Setter\",
     \"zone\":\"BR\"
     },
```

### Tidy Data
```{r}
#| echo: false
library(httr)
library(jsonlite)
# json file from a volleyball match (from Volleymetrics, part of Hudl) 
getmatch<-GET("https://grimshawville.byu.edu/VolleymetricsBuffaloColgate.json")
matchjson<-fromJSON(content(getmatch, "text", encoding = "UTF-8"))

# now create a tidy dataset of Set 1 Score and Rotation
Set1 <- tibble(HomePts = sapply(matchjson$sets$rallies[[1]]$homeScore, `[[`, 1),
               AwayPts = sapply(matchjson$sets$rallies[[1]]$awayScore, `[[`, 1),
               HomeRotation = sapply(matchjson$sets$rallies[[1]]$homeSetterRotation, `[[`, 1),
               AwayRotation = sapply(matchjson$sets$rallies[[1]]$awaySetterRotation, `[[`, 1) )
Set1 |>
  print(n = 43)
```

:::

## Don't be Black / White about Tidy {.smaller}

Statistics Degrees Awarded (Top Schools by Type over Time)

::: panel-tabset

### Tidy A
```{r}
#| echo: false
stat_programs<-read_csv("
School,   Year, Degree, Awarded
Berkeley, 2013, BS,     143
Berkeley, 2014, BS,     160
Berkeley, 2015, BS,     215
Berkeley, 2016, BS,     174
Berkeley, 2017, BS,     215
Berkeley, 2018, BS,     226
Berkeley, 2013, MS,      39
Berkeley, 2014, MS,      50
Berkeley, 2015, MS,      20
Berkeley, 2016, MS,      34
Berkeley, 2017, MS,      23
Berkeley, 2018, MS,      39
BYU,      2013, BS,      35
BYU,      2014, BS,      42
BYU,      2015, BS,      57
BYU,      2016, BS,      69
BYU,      2017, BS,     101
BYU,      2018, BS,     136
BYU,      2013, MS,       9
BYU,      2014, MS,      15
BYU,      2015, MS,      12
BYU,      2016, MS,      14
BYU,      2017, MS,      16
BYU,      2018, MS,       9
Duke,     2013, BS,       8
Duke,     2014, BS,      14
Duke,     2015, BS,      23
Duke,     2016, BS,      33
Duke,     2017, BS,      40
Duke,     2018, BS,      33
Duke,     2013, MS,      11
Duke,     2014, MS,       8
Duke,     2015, MS,      17
Duke,     2016, MS,      29
Duke,     2017, MS,      33
Duke,     2018, MS,      43
Harvard,  2013, BS,      23
Harvard,  2014, BS,      36
Harvard,  2015, BS,      43
Harvard,  2016, BS,      63
Harvard,  2017, BS,      95
Harvard,  2018, BS,     100
Harvard,  2013, MS,      25
Harvard,  2014, MS,      20
Harvard,  2015, MS,      22
Harvard,  2016, MS,      35
Harvard,  2017, MS,      40
Harvard,  2018, MS,      31
")
stat_programs |>
  print(n = 18)
```

### Tidy A Plot
```{r out.width = "50%"}
#| echo: false
stat_programs |>
  ggplot(aes(x = Year, y = Awarded, color = Degree)) + 
  geom_line() + 
  facet_wrap(~ School)
```

### Tidy B
```{r}
#| echo: false
stat_programs <- stat_programs |>
  pivot_wider(names_from = Degree, values_from = Awarded)
stat_programs |>
  print(n = 18)
```

### Tidy B Plot
```{r out.width = "50%"}
#| echo: false
stat_programs |>
  ggplot(aes(x = BS, y = MS, color = School)) + 
  geom_point(size = 3) +
  geom_smooth(method='lm', formula= y~x, se = FALSE)
```
:::


# Reshaping Datasets

## Reshaping Datasets {.smaller}

### Wide to Long

::: columns
::: {.column width="40%"}

One Factor Experiment

Factor: Crayon Color

Response: Burn Time

```{r}
#| echo: true
#| code-fold: true
crayon <- read_table("
Color  Rep1 Rep2 Rep3
Yellow 270  259  233
Black  177  118  154
Red    121  200  125
")
```

```{r}
#| echo: true
crayon
```
:::

::: {.column width="60%"}

![](images/pivot-longer.png)
:::

:::

## `pivot_longer()` 

::: columns
::: {.column width="40%"}
### Untidy
```{r}
#| echo: false
crayon
```
:::
::: {.column width="60%"}
### Tidy
```{r}
#| echo: true
crayon |>
  pivot_longer(
    cols = c(Rep1, Rep2, Rep3),
    names_to = "Replicate",
    values_to = "BurnTime"
  )
```
:::
:::

## {.smaller}

### Visualize 

::: columns
::: {.column width="50%"}

```{r ref.label = "crayon", echo = FALSE, warning = FALSE, out.width = "100%", fig.width = 7}
```
:::
::: {.column width="50%"}

```{r crayon}
#| echo: true
#| fig-show: "hide"
crayon |>
  pivot_longer(
    cols = c(Rep1, Rep2, Rep3),
    names_to = "Replicate",
    values_to = "BurnTime"
  ) |>
  ggplot(aes(x = Color, y = BurnTime)) +
    geom_boxplot(color="black", 
                 fill=c("gray", "red", "yellow")) +
    labs(
      x = "Crayon Color",
      y = "Burn Time (seconds)",
      title = "Randomized Experiment with 3 Replicates"
    ) +
    theme_minimal()
```
:::
:::


## 

### Details

Shorthand for many columns (`starts_with("Rep")`)

Clever code for patterns in many column names

The opposite operation uses `pivot_wider`


## Lecture Review 

Tidy Data Rules

Recognizing Untidy Data 

What needs to be done to tidy it




