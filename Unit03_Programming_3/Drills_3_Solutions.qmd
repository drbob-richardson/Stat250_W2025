---
title: "Unit 3 Drills Solutions"
format: html
editor: visual
---

## Problem 1

Write a `for` loop that calculates the sum of all even numbers between 1 and 20. Print the result.

```{r}
#| echo: true

# Write your for loop here
even_sum = 0
for(i in 1:20){
  if(i %% 2 == 0)even_sum = even_sum + i
}
print(even_sum)
```

## Problem 2

Write a `while` loop that starts with the value `x = 1` and repeatedly doubles `x` until it exceeds 100. Print the final value of `x`.

```{r}
#| echo: true

# Write your while loop here
x <- 1
while(x <= 100){
  x = 2*x
}
print(x)
```

## Problem 3

Write an R script that checks if a given number `num` is positive, negative, or zero, and prints a message for each case.

```{r}
#| echo: true

# Example number
num <- -5

# Write your if statement here
if(num > 0){
  print("The number if positive")
} else if(num == 0){
  print("The number is 0")
} else {
  "The number is negative"
}
```

## Problem 4

Write an R script that checks if a given number `num` is:
- Between 10 and 20 (inclusive), or
- Greater than 50.

If either condition is true, print `"Condition met"`, otherwise print `"Condition not met"`.

```{r}
#| echo: true

# Example number
num <- 15

# Write your code here
if((num >= 10 & num <= 20) || num > 50){
  print("Condition met")
} else {
  print("Condition not met")
}
```

## Problem 5

Write a function `multiply_by_two()` that takes a single argument, doubles its value, and returns the result. Test the function with the input `5`.

```{r}
#| echo: true

# Write your function here
multiply_by_two <- function(x){
  return(2*x)
}
multiply_by_two(5)
```

## Problem 6

Consider the following incomplete R script. Fill in the missing code and explain the difference between the global variable `a` and the local variable `a` inside the function.

```{r}
#| echo: true

# Global variable
a <- 10

# Function
modify_a <- function() {
  a <- 20  # Local variable
  return(a)
}

# Call the function and print both values of `a`
print(modify_a())
print(a)

# a is assigned to 20 inside the function but it doesn't affect a outside the function
```

## Problem 7

Write nested `for` loops to create the following pattern using asterisks:

```
*
**
***
****
*****
```

Each row of the pattern should have an increasing number of asterisks, starting with 1 in the first row and ending with 5 in the last.

```{r}
#| echo: true

# Write your nested for loops here
for(i in 1:5){
  this_line <- rep("*",i)
  print(this_line)
}
```
