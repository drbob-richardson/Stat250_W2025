---
title: "DNA Sequencing in R"
subtitle: "BYU STAT 250"
author: "Dr. Robert Richardson"
format: 
  revealjs:
    theme: slides.scss
    multiplex: true
    transition: fade
    slide-number: true
    chalkboard: true
    center: false
execute:
  freeze: auto
project:
  type: website
---

```{r}
#| include: false
knitr::opts_chunk$set(
  fig.width = 8,
  fig.asp = 0.818,
  fig.retina = 3,
  dpi = 300,
  out.width = "80%",
  fig.align = "center"
)
options(scipen = 100, width = 70)
```

## Introduction {.smaller}

DNA sequences are at the heart of understanding genetics and biological systems. Simulating DNA sequences is not only a fascinating exercise but also a practical tool in computational biology. 

In this unit, we will explore the following questions:

-   What are the basic rules governing DNA sequences?
-   How can we simulate random DNA sequences in R?
-   What are the limitations and constraints of DNA sequences?

By the end of this unit, you will learn:

-   How to use loops, conditional statements, and functions to simulate data.
-   How to represent and manipulate DNA sequences in R.
-   How to write efficient and reusable code.



## The Rules of DNA Sequences

1. **Nucleotide Bases**: DNA is made up of four nucleotide bases: `A`, `T`, `C`, and `G`.
2. **Complementary Pairing**:
   - `A` pairs with `T`.
   - `C` pairs with `G`.
3. **Sequence Length**: DNA sequences can vary in length, and their simulation should allow flexibility.

Note that randomly generated sequences lack biological context, such as gene structure or regulatory regions, but we can try it anyway!


## Goal of this Unit

We aim to write a **function** that can generate a random DNA sequence of a given size. This function will:

1. Randomly sample bases for odd indices.
2. Assign complementary bases for even indices.
3. Allow the user to specify the sequence length.

## Example {.smaller}

Suppose we want to generate a DNA sequence of length 10. The function we write will:

1. Start with an empty sequence.
2. Randomly sample a base for position 1.
3. Assign the complementary base to position 2 based on position 1.
4. Continue this process for the entire sequence.

The result will look something like this:

```{r}
# Example output:
DNA_sequence <- c("A", "T", "C", "G", "T", "A", "C", "G", "A", "T")
cat("Generated DNA Sequence:", paste(DNA_sequence, collapse = ""), "\n")
```

## Preparing to Code {.smaller}

We will tackle this problem step by step:

1. **Write a loop** that iterates through positions in the sequence.
2. **Use conditional statements** to determine whether the position is odd or even.
3. **Reference a data frame** to handle base and complementary base mappings.
4. **Wrap everything in a function** for flexibility and reusability.

In the next slides, we will build and refine our code to achieve this goal. Letâ€™s get started!

## `for` Loops {.smaller}

A `for` loop allows you to iterate over elements of a data frame and perform actions on each element.

```{r}
#| echo: true
# Basic structure of a for loop
for (i in 1:10) {
  print(i)
}
```

-   Everything within the brackets `{` and `}` are part of the loop
-   i is the argument, it can be any valid variable name
-   1:10 is the range we evaluate, it can be any valid vector

## Fibonacci Sequence Example

The Fibonacci sequence is a sequence of numbers where each number is the sum of the previous 2. This is easy for the first several values: 1, 1, 2, 3, 5, 8, 13, .... But what is the 57th value of the Fibonacci sequence?

```{r}
#| echo: true
# Generate the first 10 Fibonacci numbers using a for loop
fibonacci <- numeric(10) # Create an empty vector of size 57
fibonacci[1] <- 1
fibonacci[2] <- 1
for (i in 3:57) {
  fibonacci[i] <- fibonacci[i-1] + fibonacci[i-2]
}
fibonacci[57]
```

## `if` statements

Recall that we can create a Boolean with a conditional statement. We can take actions based on a conditional statement.

```{r}
#| echo: true
x <- 7
if(4 == 5){
  x <- 4
}
x
```

If the statement inside the `if` statement is true then everything in the brackets `{` and `}` will be executed, otherwise it skips it.

## `if`-`else` statements

We can provide an alternative set of code to execute if necessary using an `else` statement.

```{r}
#| echo: true
x <- 5 
if (x > 0) {
  print("x is positive")
} else {
  print("x is not positive")
}
```

##  {.smaller}

Suppose we have a data frame summarizing clinical trial results:


```{r}
#| echo: true
# Sample data frame
clinical_data <- data.frame(
  ID = 1:10,
  Treatment_Group = c("A", "B", "A", "B", "A", "B", "A", "B", "A", "B"),
  CigarettesPerDay = c(NA, 10, NA, 5, NA, 25, NA, NA, 15, NA),
  Dosage = c(0,0,0,0,0,0,0,0,0,0)
)
clinical_data
```

## Replacing NAs

The `NA` is a special character in R that often represents missing values. 

::: panel-tabset
### Before code

```{r}
clinical_data
```

### Code

```{r}
#| echo: true
# Replace NAs with 0 using a for loop
for (i in 1:nrow(clinical_data)) {
  if (is.na(clinical_data$CigarettesPerDay[i])) {
    clinical_data$CigarettesPerDay[i] <- 0
  }
}
```


### After code

```{r}
clinical_data
```
:::

## Assigning Dosage

Now we want to change the dosage to be 10 for group A and 20 for group B.

::: panel-tabset
### Before code

```{r}
clinical_data
```

### Code

```{r}
#| echo: true
for (i in 1:nrow(clinical_data)) {
  if (clinical_data$Treatment_Group[i] == "A") {
    clinical_data$Dosage[i] <- 10
  } else {
    clinical_data$Dosage[i] <- 20
  }
}

```

### After code

```{r}
clinical_data
```
:::

## Logical Operators: AND and OR

```{r}
#| echo: true
# Test logical conditions
x <- 5
y <- 10
if (x > 0 & y > 0) {
  print("Both x and y are positive")
}
if (x > 0 | y < 0) {
  print("At least one condition is true")
}
```

## Practice Question

What will the following code print?

```{r}
#| echo: true
#| eval: false
x <- -1
y <- 10
if (x > 0 & y > 0) {
  print("Both x and y are positive")
} else if (x > 0 | y > 0) {
  print("At least one condition is true")
} else {
  print("Neither condition is true")
}
```



## While Loops

A `while` loop continues to execute as long as a condition is true.

```{r}
#| echo: true
# Example of a while loop
x <- 1
while (x <= 5) {
  print(x)
  x <- x + 1
}
```


## Nested Loops

You can place one loop inside another for more complex operations.

```{r}
#| echo: true
# Nested loop example: multiplication table
for (i in 1:5) {
  for (j in 1:5) {
    print(paste(i, "x", j, "=", i * j))
  }
}
```

## Logical Subsetting

Logical subsetting is a more efficient way to manipulate data frames.

::: panel-tabset
#### Replacing NAs

```{r}
#| echo: true
# Replace NAs with 0 using logical subsetting
clinical_data$Dosage[is.na(clinical_data$Dosage)] <- 0
clinical_data
```

#### Assign Dosage

```{r}
#| echo: true
# Assign dosage using logical subsetting
clinical_data$Dosage[clinical_data$Treatment_Group == "A"] <- 10
clinical_data$Dosage[clinical_data$Treatment_Group == "B"] <- 20
clinical_data
```
:::

## Efficiency: Loops vs. Vectorization

Use the `system.time()` function to compare the performance of loops and vectorized operations.


```{r}
# Sample data frame
n <- 100000
clinical_data <- data.frame(
  ID = 1:n,
  Treatment_Group = sample(c("A","B"),n,replace = TRUE),
  Dosage = rep(0,n)
)
```

::: panel-tabset
### Loop


```{r}
#| echo: true
# Timing a for loop
system.time({
for (i in 1:nrow(clinical_data)) {
  if (clinical_data$Treatment_Group[i] == "A") {
    clinical_data$Dosage[i] <- 10
  } else {
    clinical_data$Dosage[i] <- 20
  }
}
})
```

### Vectorized


```{r}
#| echo: true
# Timing vectorized operations
system.time({
clinical_data$Dosage[clinical_data$Treatment_Group == "A"] <- 10
clinical_data$Dosage[clinical_data$Treatment_Group == "B"] <- 20
clinical_data
})
```

:::

## Creating a Genetic Sequence

Write code that will create a sequence of length 200, where each base is a random "A", "T", "C", or "G" and each complement has an appropriate pair. Use a `for` loop and `if` statements. 

## Introduction to Functions {.smaller}

Functions are one of the most powerful tools in R, allowing you to write reusable and modular code. 

A function in R:

- Takes **inputs** (also called arguments).
- Executes a block of code.
- Produces **outputs**.

Why use functions?

- **Efficiency**: Write once, use multiple times.
- **Readability**: Break down complex tasks into manageable parts.
- **Error reduction**: Reduce repetitive code and potential mistakes.

---

## Components of an R Function {.smaller}

An R function has the following components:

1. **Function name**: A descriptive name for the function.
2. **Arguments**: Inputs to the function, enclosed in parentheses `()`.
3. **Code block**: A set of instructions enclosed in `{}`.
4. **Return value**: The result returned by the function, specified with `return()` or the last evaluated expression.


```{r}
# Example function structure
my_function <- function(arg1, arg2) {
  # Code block
  result <- arg1 + arg2
  return(result)
}
```

## Creating a Fibonacci Function {.smaller}

We will create a function to calculate the n-th Fibonacci number.

```{r}
#| echo: true
# Fibonacci function
fibonacci <- function(n) {
  if (n <= 2) {
    return(1)
  }
  fib <- numeric(n)
  fib[1] <- 1
  fib[2] <- 1
  for (i in 3:n) {
    fib[i] <- fib[i - 1] + fib[i - 2]
  }
  return(fib[n])
}


fibonacci(10) # Should return the 10th Fibonacci number
``` 

## Input Checking for Functions {.smaller}

To make functions more robust, we can include input validation. This ensures the function behaves as expected.



```{r}
#| echo: true
# Fibonacci function with input validation
fibonacci <- function(n) {
  if (!is.numeric(n) || n != as.integer(n) || n <= 0) {
    stop("Error: Input must be a positive integer.")
  }
  if (n <= 2) {
    return(1)
  }
  fib <- numeric(n)
  fib[1] <- 1
  fib[2] <- 1
  for (i in 3:n) {
    fib[i] <- fib[i - 1] + fib[i - 2]
  }
  return(fib[n])
}


fibonacci(10) # Should work
#fibonacci("a") # Should throw an error
```

## Global vs. Local Variables {.smaller}

- **Global Variables**
Variables created outside of a function.
Accessible anywhere in the script or workspace.
- **Local Variables**
Variables created inside a function.
Exist only within the function.


```{r}
#| echo: true
# Global variable
x <- 10

# Function demonstrating local scope
example_function <- function(y) {
  x <- y + 5  # Local variable
  return(x)
}

# Usage
example_function(3) # Returns 8
x  # Still 10, as global 'x' was not modified
```

## Genetic sequencing

Write a function that takes an even integer `n` and creates a genetic sequence of length `n`, following all the proper rules. Perform input value checking and throw an error if the input is not correct. 

## Summary

In this unit, we covered:

-   Replacing missing values and assigning conditional values using loops and logical masks.
-   Writing and nesting loops for more complex tasks.
-   Comparing the efficiency of loops vs. vectorized operations.
-   Timing operations using `system.time()`.
